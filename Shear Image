import matplotlib.pyplot as plt
import numpy as np
import math
import cv2

def shear(image,a,b):
    img = image 

    width=img.shape[0]
    hight=img.shape[1]


    x,y,p,q=[],[],[],[]

    for i in range(width):
        for j in range( hight):
            # forward mapping
            x1 = i+j*a
            y1 = i*b+j
            x.append(int(x1))
            y.append(int(y1))
            p.append(i)
            q.append(j)
    img1=np.zeros((abs(min(x))+abs(max(x))+1,abs(min(y))+abs(max(y))+1),dtype="uint8")
    count=0
    print(img1.shape)
    arr1 = np.full(len(x), min(x))
    arr2 = np.full(len(y), max(y))
    xo=np.array(x)-arr1
    yo=arr2-np.array(y)
    for i in range (width):
        for j in range (hight):
            img1[xo[count],yo[count]]=img[i,j]
            count=count+1
    plt.figure(figsize=(30,30))
    plt.subplot(1,2,1)
    plt.imshow(img,cmap='gray')
    plt.subplot(1,2,2)
    plt.title('Affine transformed image ')
    plt.imshow(img1,cmap='gray')
    plt.subplot(1,2,1)
    plt.imshow(img,cmap='gray') 
    plt.scatter(p[500],q[500],color='red')
    plt.scatter(p[500000],q[500000],color='red')#,x[100],y[100],x[300],y[300]
    plt.scatter(p[100000],q[100000],color='red')
    plt.title('original image')
    return x,y,p,q,img1
    
img = cv2.imread('a4.png',cv2.IMREAD_GRAYSCALE)  # Load an color image in grayscale
a=float(input("Enter value shear in x direction: "))        #shear in x direction
b=float(input("Enter value shear in y direction: "))    #shear in y direction
x,y,p,q,img1=shear(img,a,b)

# mapped image into shear image by selecting 3 colinear point
from numpy.linalg import inv
x1,y1,x2,y2,x3,y3=x[500],y[500],x[100000],y[100000],x[500000],y[500000]
mat=np.array([[x1,y1,1,0,0,0],[0,0,0,x1,y1,1],[x2,y2,1,0,0,0],[0,0,0,x2,y2,1],[x3,y3,1,0,0,0],[0,0,0,x3,y3,1]],dtype=np.float32)      
po=np.array([p[500],q[500],p[100000],q[100000],p[500000],q[500000]]) 
invmat=inv(mat)  
para=(invmat.dot(po))
pi=np.array([[para[0],para[1],para[2]],[para[3],para[4],para[5]],[0,0,1]])
pi=inv(pi)
print('estimated affine metrix by selecting three non colenier point is= ')
print('...........................................................................')
print(pi)
print('...........................................................................')

invimg1=np.zeros((abs(min(x))+abs(max(x))+1,abs(min(y))+abs(max(y))+1),dtype="uint8")
x=[]
y=[]
for i in range (img.shape[0]):
    for j in range (img.shape[1]):
        temp=np.array([i,j,1])
        temp1=pi.dot(temp)
        x.append(int(temp1[0]))
        y.append(int(temp1[1]))
arr1 = np.full(len(x), min(x))
arr2 = np.full(len(y), max(y))
xo=np.array(x)-arr1
yo=arr2-np.array(y)
count=0
for i in range (img.shape[0]):
    for j in range (img.shape[1]):
        invimg1[xo[count],yo[count]]=img[i,j]
        count=count+1
plt.figure(figsize=(15,15))
plt.subplot(1,2,2)
plt.imshow(img1,cmap='gray')
plt.title('Affine transformed image ')
plt.subplot(1,2,1)
plt.imshow(invimg1,cmap='gray') 
plt.title('image using estimated affine metrix ')
